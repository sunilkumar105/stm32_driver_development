
F767Zxxdriver_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ad8  08000ae0  00001ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ad8  08000ad8  00001ae0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ad8  08000ad8  00001ae0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ad8  08000ae0  00001ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad8  08000ad8  00001ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000adc  08000adc  00001adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ae0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ae0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a85  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c1  00000000  00000000  00002593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00002858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000091  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002150  00000000  00000000  000029b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012d1  00000000  00000000  00004b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009592  00000000  00000000  00005dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000f36c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000284  00000000  00000000  0000f3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0000f634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000ac0 	.word	0x08000ac0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000ac0 	.word	0x08000ac0

08000238 <main>:
void delay() {
	for (uint64_t i = 0; i < 500000 / 2; i++)
		;
}

int main(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800023e:	2101      	movs	r1, #1
 8000240:	4815      	ldr	r0, [pc, #84]	@ (8000298 <main+0x60>)
 8000242:	f000 f86d 	bl	8000320 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000246:	2101      	movs	r1, #1
 8000248:	4814      	ldr	r0, [pc, #80]	@ (800029c <main+0x64>)
 800024a:	f000 f869 	bl	8000320 <GPIO_PeriClockControl>

	GPIO_Handle_t gpioLed;
	gpioLed.pGPIOx = GPIOB;
 800024e:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <main+0x60>)
 8000250:	60fb      	str	r3, [r7, #12]
	gpioLed.GPIO_PinConfig.GPIO_Pinumber = GPIO_PIN_NO_7;
 8000252:	2307      	movs	r3, #7
 8000254:	743b      	strb	r3, [r7, #16]
	gpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000256:	2301      	movs	r3, #1
 8000258:	747b      	strb	r3, [r7, #17]
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	74bb      	strb	r3, [r7, #18]
	gpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800025e:	2300      	movs	r3, #0
 8000260:	753b      	strb	r3, [r7, #20]
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000262:	2300      	movs	r3, #0
 8000264:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(&gpioLed);
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f966 	bl	800053c <GPIO_Init>

	GPIO_Handle_t gpioBtn;
	gpioBtn.pGPIOx = GPIOC;
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <main+0x64>)
 8000272:	603b      	str	r3, [r7, #0]
	gpioBtn.GPIO_PinConfig.GPIO_Pinumber = GPIO_PIN_NO_13;
 8000274:	230d      	movs	r3, #13
 8000276:	713b      	strb	r3, [r7, #4]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 8000278:	2305      	movs	r3, #5
 800027a:	717b      	strb	r3, [r7, #5]
	gpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800027c:	2302      	movs	r3, #2
 800027e:	71bb      	strb	r3, [r7, #6]
	gpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000280:	2300      	movs	r3, #0
 8000282:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&gpioBtn);
 8000284:	463b      	mov	r3, r7
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f958 	bl	800053c <GPIO_Init>

	//Enable IRQ for the pin
	GPIO_IRQInterruptConfig(IRQ_NUMBER_EXTI15_10, ENABLE);
 800028c:	2101      	movs	r1, #1
 800028e:	2028      	movs	r0, #40	@ 0x28
 8000290:	f000 fb10 	bl	80008b4 <GPIO_IRQInterruptConfig>

	while (1) {
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <main+0x5c>
 8000298:	40020400 	.word	0x40020400
 800029c:	40020800 	.word	0x40020800

080002a0 <EXTI0_IRQHandler>:
		 }
		 delay();*/
	}
}

void EXTI0_IRQHandler(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
//Handle the EXTI0 IRQ

	GPIO_IRQHandling(0);
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fbc7 	bl	8000a38 <GPIO_IRQHandling>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	//Handle the EXTI0 IRQ

	GPIO_IRQHandling(GPIO_PIN_NO_13);
 80002b4:	200d      	movs	r0, #13
 80002b6:	f000 fbbf 	bl	8000a38 <GPIO_IRQHandling>
	GPIO_TogglePin(GPIOB, GPIO_PIN_NO_7);
 80002ba:	2107      	movs	r1, #7
 80002bc:	4802      	ldr	r0, [pc, #8]	@ (80002c8 <EXTI15_10_IRQHandler+0x18>)
 80002be:	f000 fae3 	bl	8000888 <GPIO_TogglePin>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 fbbd 	bl	8000a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ff9b 	bl	8000238 <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000ae0 	.word	0x08000ae0
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <GPIO_PeriClockControl>:
 * @return 					- None
 *
 * @NOte					- None
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI) {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE) {
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d178      	bne.n	8000424 <GPIO_PeriClockControl+0x104>
		if (pGPIOx == GPIOA) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a75      	ldr	r2, [pc, #468]	@ (800050c <GPIO_PeriClockControl+0x1ec>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800033a:	4b75      	ldr	r3, [pc, #468]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a74      	ldr	r2, [pc, #464]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if (pGPIOx == GPIOK) {
			GPIOK_PCLK_DI();
		}
	}
}
 8000346:	e0db      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOB) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a72      	ldr	r2, [pc, #456]	@ (8000514 <GPIO_PeriClockControl+0x1f4>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000350:	4b6f      	ldr	r3, [pc, #444]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a6e      	ldr	r2, [pc, #440]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035c:	e0d0      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOC) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a6d      	ldr	r2, [pc, #436]	@ (8000518 <GPIO_PeriClockControl+0x1f8>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000366:	4b6a      	ldr	r3, [pc, #424]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a69      	ldr	r2, [pc, #420]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000372:	e0c5      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOD) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a69      	ldr	r2, [pc, #420]	@ (800051c <GPIO_PeriClockControl+0x1fc>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800037c:	4b64      	ldr	r3, [pc, #400]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a63      	ldr	r2, [pc, #396]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e0ba      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOE) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a64      	ldr	r2, [pc, #400]	@ (8000520 <GPIO_PeriClockControl+0x200>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000392:	4b5f      	ldr	r3, [pc, #380]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a5e      	ldr	r2, [pc, #376]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000398:	f043 0310 	orr.w	r3, r3, #16
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	e0af      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOF) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a60      	ldr	r2, [pc, #384]	@ (8000524 <GPIO_PeriClockControl+0x204>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a8:	4b59      	ldr	r3, [pc, #356]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a58      	ldr	r2, [pc, #352]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	e0a4      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOG) {
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a5b      	ldr	r2, [pc, #364]	@ (8000528 <GPIO_PeriClockControl+0x208>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003be:	4b54      	ldr	r3, [pc, #336]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a53      	ldr	r2, [pc, #332]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ca:	e099      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOH) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a57      	ldr	r2, [pc, #348]	@ (800052c <GPIO_PeriClockControl+0x20c>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	4a4d      	ldr	r2, [pc, #308]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e0:	e08e      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOI) {
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a52      	ldr	r2, [pc, #328]	@ (8000530 <GPIO_PeriClockControl+0x210>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 80003ea:	4b49      	ldr	r3, [pc, #292]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	4a48      	ldr	r2, [pc, #288]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80003f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f6:	e083      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOJ) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a4e      	ldr	r2, [pc, #312]	@ (8000534 <GPIO_PeriClockControl+0x214>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000400:	4b43      	ldr	r3, [pc, #268]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a42      	ldr	r2, [pc, #264]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040c:	e078      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOK) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a49      	ldr	r2, [pc, #292]	@ (8000538 <GPIO_PeriClockControl+0x218>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d174      	bne.n	8000500 <GPIO_PeriClockControl+0x1e0>
			GPIOK_PCLK_EN();
 8000416:	4b3e      	ldr	r3, [pc, #248]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041a:	4a3d      	ldr	r2, [pc, #244]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800041c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000420:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000422:	e06d      	b.n	8000500 <GPIO_PeriClockControl+0x1e0>
		if (pGPIOx == GPIOA) {
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a39      	ldr	r2, [pc, #228]	@ (800050c <GPIO_PeriClockControl+0x1ec>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d105      	bne.n	8000438 <GPIO_PeriClockControl+0x118>
			GPIOA_PCLK_DI();
 800042c:	4b38      	ldr	r3, [pc, #224]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000430:	4a37      	ldr	r2, [pc, #220]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOB) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a36      	ldr	r2, [pc, #216]	@ (8000514 <GPIO_PeriClockControl+0x1f4>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d105      	bne.n	800044c <GPIO_PeriClockControl+0x12c>
			GPIOB_PCLK_DI();
 8000440:	4b33      	ldr	r3, [pc, #204]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000444:	4a32      	ldr	r2, [pc, #200]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000446:	f023 0302 	bic.w	r3, r3, #2
 800044a:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOC) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a32      	ldr	r2, [pc, #200]	@ (8000518 <GPIO_PeriClockControl+0x1f8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d105      	bne.n	8000460 <GPIO_PeriClockControl+0x140>
			GPIOC_PCLK_DI();
 8000454:	4b2e      	ldr	r3, [pc, #184]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000458:	4a2d      	ldr	r2, [pc, #180]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800045a:	f023 0304 	bic.w	r3, r3, #4
 800045e:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOD) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a2e      	ldr	r2, [pc, #184]	@ (800051c <GPIO_PeriClockControl+0x1fc>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d105      	bne.n	8000474 <GPIO_PeriClockControl+0x154>
			GPIOD_PCLK_DI();
 8000468:	4b29      	ldr	r3, [pc, #164]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a28      	ldr	r2, [pc, #160]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800046e:	f023 0308 	bic.w	r3, r3, #8
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOE) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a2a      	ldr	r2, [pc, #168]	@ (8000520 <GPIO_PeriClockControl+0x200>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d105      	bne.n	8000488 <GPIO_PeriClockControl+0x168>
			GPIOE_PCLK_DI();
 800047c:	4b24      	ldr	r3, [pc, #144]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000480:	4a23      	ldr	r2, [pc, #140]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000482:	f023 0310 	bic.w	r3, r3, #16
 8000486:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOF) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a26      	ldr	r2, [pc, #152]	@ (8000524 <GPIO_PeriClockControl+0x204>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d105      	bne.n	800049c <GPIO_PeriClockControl+0x17c>
			GPIOF_PCLK_DI();
 8000490:	4b1f      	ldr	r3, [pc, #124]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a1e      	ldr	r2, [pc, #120]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 8000496:	f023 0320 	bic.w	r3, r3, #32
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOG) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a22      	ldr	r2, [pc, #136]	@ (8000528 <GPIO_PeriClockControl+0x208>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d105      	bne.n	80004b0 <GPIO_PeriClockControl+0x190>
			GPIOG_PCLK_DI();
 80004a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a19      	ldr	r2, [pc, #100]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOH) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a1e      	ldr	r2, [pc, #120]	@ (800052c <GPIO_PeriClockControl+0x20c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d105      	bne.n	80004c4 <GPIO_PeriClockControl+0x1a4>
			GPIOH_PCLK_DI();
 80004b8:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOI) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000530 <GPIO_PeriClockControl+0x210>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d105      	bne.n	80004d8 <GPIO_PeriClockControl+0x1b8>
			GPIOI_PCLK_DI();
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004d6:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOJ) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a16      	ldr	r2, [pc, #88]	@ (8000534 <GPIO_PeriClockControl+0x214>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d105      	bne.n	80004ec <GPIO_PeriClockControl+0x1cc>
			GPIOJ_PCLK_DI();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004e6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOK) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a12      	ldr	r2, [pc, #72]	@ (8000538 <GPIO_PeriClockControl+0x218>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d105      	bne.n	8000500 <GPIO_PeriClockControl+0x1e0>
			GPIOK_PCLK_DI();
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f8:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <GPIO_PeriClockControl+0x1f0>)
 80004fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40020000 	.word	0x40020000
 8000510:	40023800 	.word	0x40023800
 8000514:	40020400 	.word	0x40020400
 8000518:	40020800 	.word	0x40020800
 800051c:	40020c00 	.word	0x40020c00
 8000520:	40021000 	.word	0x40021000
 8000524:	40021400 	.word	0x40021400
 8000528:	40021800 	.word	0x40021800
 800052c:	40021c00 	.word	0x40021c00
 8000530:	40022000 	.word	0x40022000
 8000534:	40022400 	.word	0x40022400
 8000538:	40022800 	.word	0x40022800

0800053c <GPIO_Init>:
 *
 * @NOte					-
 *
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 800053c:	b480      	push	{r7}
 800053e:	b087      	sub	sp, #28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporary register
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]

	//1. CONFIGURE MODE OF GPIO PIN

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	795b      	ldrb	r3, [r3, #5]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d820      	bhi.n	8000592 <GPIO_Init+0x56>
		//Means the mode is non-interrupt mode
		//Mode will be actual pin-mode positioned at the location with two bit
		//we can left shift the temporary register by the mode by the pos = pinNumber x 2
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000560:	617b      	str	r3, [r7, #20]
		//clearing reg
		pGPIOHandle->pGPIOx->MODER &= ~(0b11
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	681a      	ldr	r2, [r3, #0]
				<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2103      	movs	r1, #3
 8000570:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0b11
 8000574:	43db      	mvns	r3, r3
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	400a      	ands	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
		//writing reg
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6819      	ldr	r1, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	430a      	orrs	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e0d1      	b.n	8000736 <GPIO_Init+0x1fa>
	} else {

		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT) { //Mode is interrupt for falling edge
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d816      	bhi.n	80005c8 <GPIO_Init+0x8c>
			// 1. Configure the FTSR (Falling edge trigger selection register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800059a:	4b4d      	ldr	r3, [pc, #308]	@ (80006d0 <GPIO_Init+0x194>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a49      	ldr	r2, [pc, #292]	@ (80006d0 <GPIO_Init+0x194>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
			//If we only want Falling edge trigger, then we will have to make sure that the RTSR for rising edge is disabled
			// it may be on because of previous configuration or for something else reason, so we will have to Clear it
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005b0:	4b47      	ldr	r3, [pc, #284]	@ (80006d0 <GPIO_Init+0x194>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	43d2      	mvns	r2, r2
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a43      	ldr	r2, [pc, #268]	@ (80006d0 <GPIO_Init+0x194>)
 80005c4:	400b      	ands	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
		}
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT) { //Mode is interrupt for rising edge
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d816      	bhi.n	80005fe <GPIO_Init+0xc2>
			// 1. Configure the RTSR (Rising edge trigger selection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005d0:	4b3f      	ldr	r3, [pc, #252]	@ (80006d0 <GPIO_Init+0x194>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a3b      	ldr	r2, [pc, #236]	@ (80006d0 <GPIO_Init+0x194>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005e6:	4b3a      	ldr	r3, [pc, #232]	@ (80006d0 <GPIO_Init+0x194>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	43d2      	mvns	r2, r2
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a35      	ldr	r2, [pc, #212]	@ (80006d0 <GPIO_Init+0x194>)
 80005fa:	400b      	ands	r3, r1
 80005fc:	60d3      	str	r3, [r2, #12]
		}
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT) { //Mode is interrupt for falling edge
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b06      	cmp	r3, #6
 8000604:	d815      	bhi.n	8000632 <GPIO_Init+0xf6>
			// 1. Configure both FTSR (Falling edge trigger selection register) and RTSR (Rising edge trigger selection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000606:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <GPIO_Init+0x194>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a2e      	ldr	r2, [pc, #184]	@ (80006d0 <GPIO_Init+0x194>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <GPIO_Init+0x194>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a28      	ldr	r2, [pc, #160]	@ (80006d0 <GPIO_Init+0x194>)
 800062e:	430b      	orrs	r3, r1
 8000630:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber / 4;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber % 4;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	f003 0303 	and.w	r3, r3, #3
 8000642:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a22      	ldr	r2, [pc, #136]	@ (80006d4 <GPIO_Init+0x198>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d056      	beq.n	80006fc <GPIO_Init+0x1c0>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <GPIO_Init+0x19c>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d039      	beq.n	80006cc <GPIO_Init+0x190>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <GPIO_Init+0x1a0>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d032      	beq.n	80006c8 <GPIO_Init+0x18c>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <GPIO_Init+0x1a4>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d02b      	beq.n	80006c4 <GPIO_Init+0x188>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <GPIO_Init+0x1a8>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d024      	beq.n	80006c0 <GPIO_Init+0x184>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <GPIO_Init+0x1ac>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d01d      	beq.n	80006bc <GPIO_Init+0x180>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	@ (80006ec <GPIO_Init+0x1b0>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d016      	beq.n	80006b8 <GPIO_Init+0x17c>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <GPIO_Init+0x1b4>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d00f      	beq.n	80006b4 <GPIO_Init+0x178>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a16      	ldr	r2, [pc, #88]	@ (80006f4 <GPIO_Init+0x1b8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d008      	beq.n	80006b0 <GPIO_Init+0x174>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <GPIO_Init+0x1bc>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d101      	bne.n	80006ac <GPIO_Init+0x170>
 80006a8:	2309      	movs	r3, #9
 80006aa:	e028      	b.n	80006fe <GPIO_Init+0x1c2>
 80006ac:	2300      	movs	r3, #0
 80006ae:	e026      	b.n	80006fe <GPIO_Init+0x1c2>
 80006b0:	2308      	movs	r3, #8
 80006b2:	e024      	b.n	80006fe <GPIO_Init+0x1c2>
 80006b4:	2307      	movs	r3, #7
 80006b6:	e022      	b.n	80006fe <GPIO_Init+0x1c2>
 80006b8:	2306      	movs	r3, #6
 80006ba:	e020      	b.n	80006fe <GPIO_Init+0x1c2>
 80006bc:	2305      	movs	r3, #5
 80006be:	e01e      	b.n	80006fe <GPIO_Init+0x1c2>
 80006c0:	2304      	movs	r3, #4
 80006c2:	e01c      	b.n	80006fe <GPIO_Init+0x1c2>
 80006c4:	2303      	movs	r3, #3
 80006c6:	e01a      	b.n	80006fe <GPIO_Init+0x1c2>
 80006c8:	2302      	movs	r3, #2
 80006ca:	e018      	b.n	80006fe <GPIO_Init+0x1c2>
 80006cc:	2301      	movs	r3, #1
 80006ce:	e016      	b.n	80006fe <GPIO_Init+0x1c2>
 80006d0:	40013c00 	.word	0x40013c00
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	40022000 	.word	0x40022000
 80006f8:	40022400 	.word	0x40022400
 80006fc:	2300      	movs	r3, #0
 80006fe:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 8000700:	4b5e      	ldr	r3, [pc, #376]	@ (800087c <GPIO_Init+0x340>)
 8000702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000704:	4a5d      	ldr	r2, [pc, #372]	@ (800087c <GPIO_Init+0x340>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6453      	str	r3, [r2, #68]	@ 0x44

		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800070c:	7c7a      	ldrb	r2, [r7, #17]
 800070e:	7cbb      	ldrb	r3, [r7, #18]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	fa02 f103 	lsl.w	r1, r2, r3
 8000716:	4a5a      	ldr	r2, [pc, #360]	@ (8000880 <GPIO_Init+0x344>)
 8000718:	7cfb      	ldrb	r3, [r7, #19]
 800071a:	3302      	adds	r3, #2
 800071c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the exti interrupt delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000720:	4b58      	ldr	r3, [pc, #352]	@ (8000884 <GPIO_Init+0x348>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	7912      	ldrb	r2, [r2, #4]
 8000728:	4611      	mov	r1, r2
 800072a:	2201      	movs	r2, #1
 800072c:	408a      	lsls	r2, r1
 800072e:	4611      	mov	r1, r2
 8000730:	4a54      	ldr	r2, [pc, #336]	@ (8000884 <GPIO_Init+0x348>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
	//2. CONFIGURE THE SPEED
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	799b      	ldrb	r3, [r3, #6]
 800073e:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800074a:	617b      	str	r3, [r7, #20]
	//clearing reg
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0b11
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	689a      	ldr	r2, [r3, #8]
			<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2103      	movs	r1, #3
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0b11
 800075e:	43db      	mvns	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	400a      	ands	r2, r1
 8000768:	609a      	str	r2, [r3, #8]
	//setting reg
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	609a      	str	r2, [r3, #8]

	temp = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
	//3. CONFIGURE THE PUPD REGISTERS
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	79db      	ldrb	r3, [r3, #7]
 8000782:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800078e:	617b      	str	r3, [r7, #20]
	//clearing reg
	pGPIOHandle->pGPIOx->PUPDR &= ~(0b11
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	68da      	ldr	r2, [r3, #12]
			<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	2103      	movs	r1, #3
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0b11
 80007a2:	43db      	mvns	r3, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	400a      	ands	r2, r1
 80007ac:	60da      	str	r2, [r3, #12]
	//setting reg
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68d9      	ldr	r1, [r3, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
	//4. CONFIGURE THE OUTPUT TYPE
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7a1b      	ldrb	r3, [r3, #8]
 80007c6:	461a      	mov	r2, r3
			<< pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80007d0:	617b      	str	r3, [r7, #20]
	//clearing reg
	pGPIOHandle->pGPIOx->OTYPER &= ~(0b1
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	4619      	mov	r1, r3
 80007de:	2301      	movs	r3, #1
 80007e0:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0b1
 80007e2:	43db      	mvns	r3, r3
 80007e4:	4619      	mov	r1, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	400a      	ands	r2, r1
 80007ec:	605a      	str	r2, [r3, #4]
	//setting reg
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6859      	ldr	r1, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	//5. CONFIGURE THE ALTERNATE FUNCTIONALITY
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN) { //If the mode is alternate function, then only configure the alternate function
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	795b      	ldrb	r3, [r3, #5]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d832      	bhi.n	8000870 <GPIO_Init+0x334>

		uint8_t AFR_REG, POS;
		AFR_REG = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber / 8;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	743b      	strb	r3, [r7, #16]
		POS = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber % 8;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	73fb      	strb	r3, [r7, #15]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * POS);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7a5b      	ldrb	r3, [r3, #9]
 8000820:	461a      	mov	r2, r3
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]

		//clearing reg
		pGPIOHandle->pGPIOx->AFR[AFR_REG] &= ~(0b1111 << 4 * POS);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	7c3a      	ldrb	r2, [r7, #16]
 8000832:	3208      	adds	r2, #8
 8000834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	220f      	movs	r2, #15
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	7c3a      	ldrb	r2, [r7, #16]
 800084c:	4001      	ands	r1, r0
 800084e:	3208      	adds	r2, #8
 8000850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//setting reg
		pGPIOHandle->pGPIOx->AFR[AFR_REG] |= temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	7c3a      	ldrb	r2, [r7, #16]
 800085a:	3208      	adds	r2, #8
 800085c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	7c3a      	ldrb	r2, [r7, #16]
 8000866:	6979      	ldr	r1, [r7, #20]
 8000868:	4301      	orrs	r1, r0
 800086a:	3208      	adds	r2, #8
 800086c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000870:	bf00      	nop
 8000872:	371c      	adds	r7, #28
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40023800 	.word	0x40023800
 8000880:	40013800 	.word	0x40013800
 8000884:	40013c00 	.word	0x40013c00

08000888 <GPIO_TogglePin>:
 * @return 					-
 *
 * @NOte					-
 *
 */
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	78fa      	ldrb	r2, [r7, #3]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	405a      	eors	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	615a      	str	r2, [r3, #20]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <GPIO_IRQInterruptConfig>:
 * @return 					-
 *
 * @NOte					-
 *
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]

	if (ENorDI == ENABLE) {
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d14e      	bne.n	8000968 <GPIO_IRQInterruptConfig+0xb4>

		if (IRQNumber <= 31) {
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b1f      	cmp	r3, #31
 80008ce:	d80a      	bhi.n	80008e6 <GPIO_IRQInterruptConfig+0x32>
			//PROGRAM ISER0
			//NVIC_ISER0 IS A POINTER, SO DEREFERANCE IT AND PUT THE VALUE
			*NVIC_ISER0 |= (1 << IRQNumber);
 80008d0:	4b50      	ldr	r3, [pc, #320]	@ (8000a14 <GPIO_IRQInterruptConfig+0x160>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a4d      	ldr	r2, [pc, #308]	@ (8000a14 <GPIO_IRQInterruptConfig+0x160>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
			//PROGRAM ICER3
			*NVIC_ICER3 |= (1 << IRQNumber % 96);
		}
	}

}
 80008e4:	e08f      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	d90f      	bls.n	800090c <GPIO_IRQInterruptConfig+0x58>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80008f0:	d80c      	bhi.n	800090c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 80008f2:	4b49      	ldr	r3, [pc, #292]	@ (8000a18 <GPIO_IRQInterruptConfig+0x164>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	f002 021f 	and.w	r2, r2, #31
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4611      	mov	r1, r2
 8000904:	4a44      	ldr	r2, [pc, #272]	@ (8000a18 <GPIO_IRQInterruptConfig+0x164>)
 8000906:	430b      	orrs	r3, r1
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	e07c      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 65 && IRQNumber < 96) {
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b41      	cmp	r3, #65	@ 0x41
 8000910:	d90f      	bls.n	8000932 <GPIO_IRQInterruptConfig+0x7e>
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b5f      	cmp	r3, #95	@ 0x5f
 8000916:	d80c      	bhi.n	8000932 <GPIO_IRQInterruptConfig+0x7e>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000918:	4b40      	ldr	r3, [pc, #256]	@ (8000a1c <GPIO_IRQInterruptConfig+0x168>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	79fa      	ldrb	r2, [r7, #7]
 800091e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f202 	lsl.w	r2, r1, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a3c      	ldr	r2, [pc, #240]	@ (8000a1c <GPIO_IRQInterruptConfig+0x168>)
 800092c:	430b      	orrs	r3, r1
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	e069      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 97 && IRQNumber < 128) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b61      	cmp	r3, #97	@ 0x61
 8000936:	d966      	bls.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db62      	blt.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
			*NVIC_ISER3 |= (1 << IRQNumber % 96);
 8000940:	4b37      	ldr	r3, [pc, #220]	@ (8000a20 <GPIO_IRQInterruptConfig+0x16c>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	4b37      	ldr	r3, [pc, #220]	@ (8000a24 <GPIO_IRQInterruptConfig+0x170>)
 8000948:	fba3 1302 	umull	r1, r3, r3, r2
 800094c:	0999      	lsrs	r1, r3, #6
 800094e:	460b      	mov	r3, r1
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	440b      	add	r3, r1
 8000954:	015b      	lsls	r3, r3, #5
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	2301      	movs	r3, #1
 800095e:	4093      	lsls	r3, r2
 8000960:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <GPIO_IRQInterruptConfig+0x16c>)
 8000962:	4303      	orrs	r3, r0
 8000964:	6013      	str	r3, [r2, #0]
}
 8000966:	e04e      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
		if (IRQNumber <= 31) {
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b1f      	cmp	r3, #31
 800096c:	d80a      	bhi.n	8000984 <GPIO_IRQInterruptConfig+0xd0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800096e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <GPIO_IRQInterruptConfig+0x174>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	2101      	movs	r1, #1
 8000976:	fa01 f202 	lsl.w	r2, r1, r2
 800097a:	4611      	mov	r1, r2
 800097c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a28 <GPIO_IRQInterruptConfig+0x174>)
 800097e:	430b      	orrs	r3, r1
 8000980:	6013      	str	r3, [r2, #0]
}
 8000982:	e040      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b1f      	cmp	r3, #31
 8000988:	d90f      	bls.n	80009aa <GPIO_IRQInterruptConfig+0xf6>
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b3f      	cmp	r3, #63	@ 0x3f
 800098e:	d80c      	bhi.n	80009aa <GPIO_IRQInterruptConfig+0xf6>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000990:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <GPIO_IRQInterruptConfig+0x178>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	f002 021f 	and.w	r2, r2, #31
 800099a:	2101      	movs	r1, #1
 800099c:	fa01 f202 	lsl.w	r2, r1, r2
 80009a0:	4611      	mov	r1, r2
 80009a2:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <GPIO_IRQInterruptConfig+0x178>)
 80009a4:	430b      	orrs	r3, r1
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e02d      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 65 && IRQNumber < 96) {
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b41      	cmp	r3, #65	@ 0x41
 80009ae:	d90f      	bls.n	80009d0 <GPIO_IRQInterruptConfig+0x11c>
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b5f      	cmp	r3, #95	@ 0x5f
 80009b4:	d80c      	bhi.n	80009d0 <GPIO_IRQInterruptConfig+0x11c>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <GPIO_IRQInterruptConfig+0x17c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	4611      	mov	r1, r2
 80009c8:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <GPIO_IRQInterruptConfig+0x17c>)
 80009ca:	430b      	orrs	r3, r1
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e01a      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 97 && IRQNumber < 128) {
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b61      	cmp	r3, #97	@ 0x61
 80009d4:	d917      	bls.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db13      	blt.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
			*NVIC_ICER3 |= (1 << IRQNumber % 96);
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <GPIO_IRQInterruptConfig+0x180>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <GPIO_IRQInterruptConfig+0x170>)
 80009e6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ea:	0999      	lsrs	r1, r3, #6
 80009ec:	460b      	mov	r3, r1
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	440b      	add	r3, r1
 80009f2:	015b      	lsls	r3, r3, #5
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	2301      	movs	r3, #1
 80009fc:	4093      	lsls	r3, r2
 80009fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <GPIO_IRQInterruptConfig+0x180>)
 8000a00:	4303      	orrs	r3, r0
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	e7ff      	b.n	8000a06 <GPIO_IRQInterruptConfig+0x152>
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000e104 	.word	0xe000e104
 8000a1c:	e000e108 	.word	0xe000e108
 8000a20:	e000e10c 	.word	0xe000e10c
 8000a24:	aaaaaaab 	.word	0xaaaaaaab
 8000a28:	e000e180 	.word	0xe000e180
 8000a2c:	e000e184 	.word	0xe000e184
 8000a30:	e000e188 	.word	0xe000e188
 8000a34:	e000e18c 	.word	0xe000e18c

08000a38 <GPIO_IRQHandling>:
	uint8_t shiftAmount = (8 * iprx_Section)
			+ (8 - NO_OF_PRIORITY_BITS_IMPLEMNETED);
	*(NVIC_PR_BASE_ADDR + (iprx * 4)) |= (IRQpriority << shiftAmount);
}

void GPIO_IRQHandling(uint8_t pinNumber) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]

	//Clear the pending register, corresponding to the pin number
	//check if it is set.
	if (EXTI->PR & (1 << pinNumber)) {
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <GPIO_IRQHandling+0x3c>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	4013      	ands	r3, r2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d009      	beq.n	8000a68 <GPIO_IRQHandling+0x30>

		//CLEAR THE PR REGISTER
		EXTI->PR |= (1 << pinNumber);
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <GPIO_IRQHandling+0x3c>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a60:	4611      	mov	r1, r2
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <GPIO_IRQHandling+0x3c>)
 8000a64:	430b      	orrs	r3, r1
 8000a66:	6153      	str	r3, [r2, #20]
	}

}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40013c00 	.word	0x40013c00

08000a78 <__libc_init_array>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8000ab0 <__libc_init_array+0x38>)
 8000a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8000ab4 <__libc_init_array+0x3c>)
 8000a7e:	1b64      	subs	r4, r4, r5
 8000a80:	10a4      	asrs	r4, r4, #2
 8000a82:	2600      	movs	r6, #0
 8000a84:	42a6      	cmp	r6, r4
 8000a86:	d109      	bne.n	8000a9c <__libc_init_array+0x24>
 8000a88:	4d0b      	ldr	r5, [pc, #44]	@ (8000ab8 <__libc_init_array+0x40>)
 8000a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8000abc <__libc_init_array+0x44>)
 8000a8c:	f000 f818 	bl	8000ac0 <_init>
 8000a90:	1b64      	subs	r4, r4, r5
 8000a92:	10a4      	asrs	r4, r4, #2
 8000a94:	2600      	movs	r6, #0
 8000a96:	42a6      	cmp	r6, r4
 8000a98:	d105      	bne.n	8000aa6 <__libc_init_array+0x2e>
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
 8000a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa0:	4798      	blx	r3
 8000aa2:	3601      	adds	r6, #1
 8000aa4:	e7ee      	b.n	8000a84 <__libc_init_array+0xc>
 8000aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aaa:	4798      	blx	r3
 8000aac:	3601      	adds	r6, #1
 8000aae:	e7f2      	b.n	8000a96 <__libc_init_array+0x1e>
 8000ab0:	08000ad8 	.word	0x08000ad8
 8000ab4:	08000ad8 	.word	0x08000ad8
 8000ab8:	08000ad8 	.word	0x08000ad8
 8000abc:	08000adc 	.word	0x08000adc

08000ac0 <_init>:
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	bf00      	nop
 8000ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac6:	bc08      	pop	{r3}
 8000ac8:	469e      	mov	lr, r3
 8000aca:	4770      	bx	lr

08000acc <_fini>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr
