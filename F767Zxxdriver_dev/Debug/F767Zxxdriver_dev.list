
F767Zxxdriver_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000054c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000744  0800074c  0000174c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000744  08000744  0000174c  2**0
                  CONTENTS
  4 .ARM          00000000  08000744  08000744  0000174c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000744  0800074c  0000174c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000744  08000744  00001744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000748  08000748  00001748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000174c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800074c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800074c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000877  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b3  00000000  00000000  00001ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  000022a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000072  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020c8  00000000  00000000  000023c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fa7  00000000  00000000  0000448a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000914f  00000000  00000000  00005431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000e580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  0000e5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0000e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	0800072c 	.word	0x0800072c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	0800072c 	.word	0x0800072c

08000238 <delay>:
#include "F767Zxx_gpio_driver.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay() {
 8000238:	b490      	push	{r4, r7}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	for (uint64_t i; i < 500000; i++) {
 800023e:	e006      	b.n	800024e <delay+0x16>
 8000240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000244:	1c50      	adds	r0, r2, #1
 8000246:	f143 0100 	adc.w	r1, r3, #0
 800024a:	e9c7 0100 	strd	r0, r1, [r7]
 800024e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <delay+0x30>)
 8000254:	42a2      	cmp	r2, r4
 8000256:	f173 0300 	sbcs.w	r3, r3, #0
 800025a:	d3f1      	bcc.n	8000240 <delay+0x8>
	}
}
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bc90      	pop	{r4, r7}
 8000266:	4770      	bx	lr
 8000268:	0007a120 	.word	0x0007a120

0800026c <main>:

int main(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioLed;
	gpioLed.pGPIOx = GPIOB;
 8000272:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <main+0x40>)
 8000274:	607b      	str	r3, [r7, #4]
	gpioLed.GPIO_PinConfig.GPIO_Pinumber = GPIO_PIN_NO_7;
 8000276:	2307      	movs	r3, #7
 8000278:	723b      	strb	r3, [r7, #8]
	gpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800027a:	2301      	movs	r3, #1
 800027c:	727b      	strb	r3, [r7, #9]
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800027e:	2302      	movs	r3, #2
 8000280:	72bb      	strb	r3, [r7, #10]
	gpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	4807      	ldr	r0, [pc, #28]	@ (80002ac <main+0x40>)
 800028e:	f000 f839 	bl	8000304 <GPIO_PeriClockControl>
	GPIO_Init(&gpioLed);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f943 	bl	8000520 <GPIO_Init>

	while (1) {
		GPIO_TogglePin(GPIOB, GPIO_PIN_NO_7);
 800029a:	2107      	movs	r1, #7
 800029c:	4803      	ldr	r0, [pc, #12]	@ (80002ac <main+0x40>)
 800029e:	f000 fa0c 	bl	80006ba <GPIO_TogglePin>
		delay();
 80002a2:	f7ff ffc9 	bl	8000238 <delay>
		GPIO_TogglePin(GPIOB, GPIO_PIN_NO_7);
 80002a6:	bf00      	nop
 80002a8:	e7f7      	b.n	800029a <main+0x2e>
 80002aa:	bf00      	nop
 80002ac:	40020400 	.word	0x40020400

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fa01 	bl	80006e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffc3 	bl	800026c <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	0800074c 	.word	0x0800074c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <GPIO_PeriClockControl>:
 * @return 					- None
 *
 * @NOte					- None
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI) {
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE) {
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d178      	bne.n	8000408 <GPIO_PeriClockControl+0x104>
		if (pGPIOx == GPIOA) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a75      	ldr	r2, [pc, #468]	@ (80004f0 <GPIO_PeriClockControl+0x1ec>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800031e:	4b75      	ldr	r3, [pc, #468]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000322:	4a74      	ldr	r2, [pc, #464]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
		if (pGPIOx == GPIOK) {
			GPIOK_PCLK_DI();
		}
	}
}
 800032a:	e0db      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOB) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a72      	ldr	r2, [pc, #456]	@ (80004f8 <GPIO_PeriClockControl+0x1f4>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000334:	4b6f      	ldr	r3, [pc, #444]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000338:	4a6e      	ldr	r2, [pc, #440]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000340:	e0d0      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOC) {
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a6d      	ldr	r2, [pc, #436]	@ (80004fc <GPIO_PeriClockControl+0x1f8>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034a:	4b6a      	ldr	r3, [pc, #424]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800034c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800034e:	4a69      	ldr	r2, [pc, #420]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000356:	e0c5      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOD) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a69      	ldr	r2, [pc, #420]	@ (8000500 <GPIO_PeriClockControl+0x1fc>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000360:	4b64      	ldr	r3, [pc, #400]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000364:	4a63      	ldr	r2, [pc, #396]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800036c:	e0ba      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOE) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a64      	ldr	r2, [pc, #400]	@ (8000504 <GPIO_PeriClockControl+0x200>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000376:	4b5f      	ldr	r3, [pc, #380]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800037a:	4a5e      	ldr	r2, [pc, #376]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000382:	e0af      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOF) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a60      	ldr	r2, [pc, #384]	@ (8000508 <GPIO_PeriClockControl+0x204>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800038c:	4b59      	ldr	r3, [pc, #356]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800038e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000390:	4a58      	ldr	r2, [pc, #352]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000398:	e0a4      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOG) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a5b      	ldr	r2, [pc, #364]	@ (800050c <GPIO_PeriClockControl+0x208>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003a2:	4b54      	ldr	r3, [pc, #336]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003a6:	4a53      	ldr	r2, [pc, #332]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80003ae:	e099      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOH) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a57      	ldr	r2, [pc, #348]	@ (8000510 <GPIO_PeriClockControl+0x20c>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003b8:	4b4e      	ldr	r3, [pc, #312]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003bc:	4a4d      	ldr	r2, [pc, #308]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80003c4:	e08e      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOI) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a52      	ldr	r2, [pc, #328]	@ (8000514 <GPIO_PeriClockControl+0x210>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 80003ce:	4b49      	ldr	r3, [pc, #292]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003d2:	4a48      	ldr	r2, [pc, #288]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80003da:	e083      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOJ) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a4e      	ldr	r2, [pc, #312]	@ (8000518 <GPIO_PeriClockControl+0x214>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 80003e4:	4b43      	ldr	r3, [pc, #268]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003e8:	4a42      	ldr	r2, [pc, #264]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80003f0:	e078      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOK) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a49      	ldr	r2, [pc, #292]	@ (800051c <GPIO_PeriClockControl+0x218>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d174      	bne.n	80004e4 <GPIO_PeriClockControl+0x1e0>
			GPIOK_PCLK_EN();
 80003fa:	4b3e      	ldr	r3, [pc, #248]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80003fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003fe:	4a3d      	ldr	r2, [pc, #244]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000404:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000406:	e06d      	b.n	80004e4 <GPIO_PeriClockControl+0x1e0>
		if (pGPIOx == GPIOA) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a39      	ldr	r2, [pc, #228]	@ (80004f0 <GPIO_PeriClockControl+0x1ec>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d105      	bne.n	800041c <GPIO_PeriClockControl+0x118>
			GPIOA_PCLK_DI();
 8000410:	4b38      	ldr	r3, [pc, #224]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000414:	4a37      	ldr	r2, [pc, #220]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000416:	f023 0301 	bic.w	r3, r3, #1
 800041a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOB) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a36      	ldr	r2, [pc, #216]	@ (80004f8 <GPIO_PeriClockControl+0x1f4>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d105      	bne.n	8000430 <GPIO_PeriClockControl+0x12c>
			GPIOB_PCLK_DI();
 8000424:	4b33      	ldr	r3, [pc, #204]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000428:	4a32      	ldr	r2, [pc, #200]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800042a:	f023 0302 	bic.w	r3, r3, #2
 800042e:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOC) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a32      	ldr	r2, [pc, #200]	@ (80004fc <GPIO_PeriClockControl+0x1f8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d105      	bne.n	8000444 <GPIO_PeriClockControl+0x140>
			GPIOC_PCLK_DI();
 8000438:	4b2e      	ldr	r3, [pc, #184]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800043a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800043c:	4a2d      	ldr	r2, [pc, #180]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800043e:	f023 0304 	bic.w	r3, r3, #4
 8000442:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOD) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a2e      	ldr	r2, [pc, #184]	@ (8000500 <GPIO_PeriClockControl+0x1fc>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d105      	bne.n	8000458 <GPIO_PeriClockControl+0x154>
			GPIOD_PCLK_DI();
 800044c:	4b29      	ldr	r3, [pc, #164]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800044e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000450:	4a28      	ldr	r2, [pc, #160]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000452:	f023 0308 	bic.w	r3, r3, #8
 8000456:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOE) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a2a      	ldr	r2, [pc, #168]	@ (8000504 <GPIO_PeriClockControl+0x200>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d105      	bne.n	800046c <GPIO_PeriClockControl+0x168>
			GPIOE_PCLK_DI();
 8000460:	4b24      	ldr	r3, [pc, #144]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000464:	4a23      	ldr	r2, [pc, #140]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000466:	f023 0310 	bic.w	r3, r3, #16
 800046a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOF) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a26      	ldr	r2, [pc, #152]	@ (8000508 <GPIO_PeriClockControl+0x204>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d105      	bne.n	8000480 <GPIO_PeriClockControl+0x17c>
			GPIOF_PCLK_DI();
 8000474:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 8000476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000478:	4a1e      	ldr	r2, [pc, #120]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800047a:	f023 0320 	bic.w	r3, r3, #32
 800047e:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOG) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a22      	ldr	r2, [pc, #136]	@ (800050c <GPIO_PeriClockControl+0x208>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <GPIO_PeriClockControl+0x190>
			GPIOG_PCLK_DI();
 8000488:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800048a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800048c:	4a19      	ldr	r2, [pc, #100]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800048e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000492:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOH) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a1e      	ldr	r2, [pc, #120]	@ (8000510 <GPIO_PeriClockControl+0x20c>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d105      	bne.n	80004a8 <GPIO_PeriClockControl+0x1a4>
			GPIOH_PCLK_DI();
 800049c:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 800049e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004a0:	4a14      	ldr	r2, [pc, #80]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80004a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOI) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000514 <GPIO_PeriClockControl+0x210>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d105      	bne.n	80004bc <GPIO_PeriClockControl+0x1b8>
			GPIOI_PCLK_DI();
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80004b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004b4:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80004b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOJ) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a16      	ldr	r2, [pc, #88]	@ (8000518 <GPIO_PeriClockControl+0x214>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d105      	bne.n	80004d0 <GPIO_PeriClockControl+0x1cc>
			GPIOJ_PCLK_DI();
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80004c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c8:	4a0a      	ldr	r2, [pc, #40]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80004ca:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80004ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (pGPIOx == GPIOK) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a12      	ldr	r2, [pc, #72]	@ (800051c <GPIO_PeriClockControl+0x218>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d105      	bne.n	80004e4 <GPIO_PeriClockControl+0x1e0>
			GPIOK_PCLK_DI();
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80004da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004dc:	4a05      	ldr	r2, [pc, #20]	@ (80004f4 <GPIO_PeriClockControl+0x1f0>)
 80004de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40020000 	.word	0x40020000
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40020400 	.word	0x40020400
 80004fc:	40020800 	.word	0x40020800
 8000500:	40020c00 	.word	0x40020c00
 8000504:	40021000 	.word	0x40021000
 8000508:	40021400 	.word	0x40021400
 800050c:	40021800 	.word	0x40021800
 8000510:	40021c00 	.word	0x40021c00
 8000514:	40022000 	.word	0x40022000
 8000518:	40022400 	.word	0x40022400
 800051c:	40022800 	.word	0x40022800

08000520 <GPIO_Init>:
 *
 * @NOte					-
 *
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporary register
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]

	//1. CONFIGURE MODE OF GPIO PIN

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d81f      	bhi.n	8000574 <GPIO_Init+0x54>
		//Means the mode is non-interrupt mode
		//Mode will be actual pin-mode positioned at the location with two bit
		//we can left shift the temporary register by the mode by the pos = pinNumber x 2
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000544:	60fb      	str	r3, [r7, #12]
		//clearing reg
		pGPIOHandle->pGPIOx->MODER &= ~(0b11
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681a      	ldr	r2, [r3, #0]
				<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	2103      	movs	r1, #3
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0b11
 8000558:	43db      	mvns	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	400a      	ands	r2, r1
 8000562:	601a      	str	r2, [r3, #0]
		//writing reg
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	6819      	ldr	r1, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	430a      	orrs	r2, r1
 8000572:	601a      	str	r2, [r3, #0]
	} else {
		//Means the mode is interrupt, will code it later
	}

	temp = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
	//2. CONFIGURE THE SPEED
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	799b      	ldrb	r3, [r3, #6]
 800057c:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000588:	60fb      	str	r3, [r7, #12]
	//clearing reg
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0b11
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	689a      	ldr	r2, [r3, #8]
			<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2103      	movs	r1, #3
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0b11
 800059c:	43db      	mvns	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	400a      	ands	r2, r1
 80005a6:	609a      	str	r2, [r3, #8]
	//setting reg
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6899      	ldr	r1, [r3, #8]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]

	temp = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
	//3. CONFIGURE THE PUPD REGISTERS
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	79db      	ldrb	r3, [r3, #7]
 80005c0:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80005cc:	60fb      	str	r3, [r7, #12]
	//clearing reg
	pGPIOHandle->pGPIOx->PUPDR &= ~(0b11
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68da      	ldr	r2, [r3, #12]
			<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2103      	movs	r1, #3
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0b11
 80005e0:	43db      	mvns	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	400a      	ands	r2, r1
 80005ea:	60da      	str	r2, [r3, #12]
	//setting reg
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68d9      	ldr	r1, [r3, #12]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]

	temp = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
	//4. CONFIGURE THE OUTPUT TYPE
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7a1b      	ldrb	r3, [r3, #8]
 8000604:	461a      	mov	r2, r3
			<< pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800060e:	60fb      	str	r3, [r7, #12]
	//clearing reg
	pGPIOHandle->pGPIOx->OTYPER &= ~(0b1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	4619      	mov	r1, r3
 800061c:	2301      	movs	r3, #1
 800061e:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0b1
 8000620:	43db      	mvns	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	400a      	ands	r2, r1
 800062a:	605a      	str	r2, [r3, #4]
	//setting reg
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6859      	ldr	r1, [r3, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	430a      	orrs	r2, r1
 800063a:	605a      	str	r2, [r3, #4]

	temp = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
	//5. CONFIGURE THE ALTERNATE FUNCTIONALITY
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN) { //If the mode is alternate function, then only configure the alternate function
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	795b      	ldrb	r3, [r3, #5]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d832      	bhi.n	80006ae <GPIO_Init+0x18e>

		uint8_t AFR_REG, POS;
		AFR_REG = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber / 8;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	72fb      	strb	r3, [r7, #11]
		POS = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber % 8;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	f003 0307 	and.w	r3, r3, #7
 8000658:	72bb      	strb	r3, [r7, #10]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * POS);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	7a5b      	ldrb	r3, [r3, #9]
 800065e:	461a      	mov	r2, r3
 8000660:	7abb      	ldrb	r3, [r7, #10]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	60fb      	str	r3, [r7, #12]

		//clearing reg
		pGPIOHandle->pGPIOx->AFR[AFR_REG] &= ~(0b1111 << 4 * POS);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7afa      	ldrb	r2, [r7, #11]
 8000670:	3208      	adds	r2, #8
 8000672:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000676:	7abb      	ldrb	r3, [r7, #10]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	220f      	movs	r2, #15
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7afa      	ldrb	r2, [r7, #11]
 800068a:	4001      	ands	r1, r0
 800068c:	3208      	adds	r2, #8
 800068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//setting reg
		pGPIOHandle->pGPIOx->AFR[AFR_REG] |= temp;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	7afa      	ldrb	r2, [r7, #11]
 8000698:	3208      	adds	r2, #8
 800069a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7afa      	ldrb	r2, [r7, #11]
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	4301      	orrs	r1, r0
 80006a8:	3208      	adds	r2, #8
 80006aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <GPIO_TogglePin>:
}

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
	pGPIOx->ODR = value;
}
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	78fa      	ldrb	r2, [r7, #3]
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	405a      	eors	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	615a      	str	r2, [r3, #20]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <__libc_init_array>:
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	4d0d      	ldr	r5, [pc, #52]	@ (800071c <__libc_init_array+0x38>)
 80006e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000720 <__libc_init_array+0x3c>)
 80006ea:	1b64      	subs	r4, r4, r5
 80006ec:	10a4      	asrs	r4, r4, #2
 80006ee:	2600      	movs	r6, #0
 80006f0:	42a6      	cmp	r6, r4
 80006f2:	d109      	bne.n	8000708 <__libc_init_array+0x24>
 80006f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000724 <__libc_init_array+0x40>)
 80006f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000728 <__libc_init_array+0x44>)
 80006f8:	f000 f818 	bl	800072c <_init>
 80006fc:	1b64      	subs	r4, r4, r5
 80006fe:	10a4      	asrs	r4, r4, #2
 8000700:	2600      	movs	r6, #0
 8000702:	42a6      	cmp	r6, r4
 8000704:	d105      	bne.n	8000712 <__libc_init_array+0x2e>
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f855 3b04 	ldr.w	r3, [r5], #4
 800070c:	4798      	blx	r3
 800070e:	3601      	adds	r6, #1
 8000710:	e7ee      	b.n	80006f0 <__libc_init_array+0xc>
 8000712:	f855 3b04 	ldr.w	r3, [r5], #4
 8000716:	4798      	blx	r3
 8000718:	3601      	adds	r6, #1
 800071a:	e7f2      	b.n	8000702 <__libc_init_array+0x1e>
 800071c:	08000744 	.word	0x08000744
 8000720:	08000744 	.word	0x08000744
 8000724:	08000744 	.word	0x08000744
 8000728:	08000748 	.word	0x08000748

0800072c <_init>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	bf00      	nop
 8000730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000732:	bc08      	pop	{r3}
 8000734:	469e      	mov	lr, r3
 8000736:	4770      	bx	lr

08000738 <_fini>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr
