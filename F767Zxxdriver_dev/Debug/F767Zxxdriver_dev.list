
F767Zxxdriver_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000924  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b1c  08000b24  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b1c  08000b1c  00001b24  2**0
                  CONTENTS
  4 .ARM          00000000  08000b1c  08000b1c  00001b24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b1c  08000b24  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b20  08000b20  00001b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b24  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b24  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a85  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c1  00000000  00000000  000025d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00002898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000091  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002150  00000000  00000000  000029f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012c4  00000000  00000000  00004b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000095de  00000000  00000000  00005e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000f3eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000284  00000000  00000000  0000f430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0000f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000b04 	.word	0x08000b04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000b04 	.word	0x08000b04

08000238 <delay>:
#include "F767Zxx_gpio_driver.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay() {
 8000238:	b490      	push	{r4, r7}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	for (uint64_t i = 0; i < 500000 / 2; i++)
 800023e:	f04f 0200 	mov.w	r2, #0
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	e9c7 2300 	strd	r2, r3, [r7]
 800024a:	e006      	b.n	800025a <delay+0x22>
 800024c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000250:	1c50      	adds	r0, r2, #1
 8000252:	f143 0100 	adc.w	r1, r3, #0
 8000256:	e9c7 0100 	strd	r0, r1, [r7]
 800025a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800025e:	4c05      	ldr	r4, [pc, #20]	@ (8000274 <delay+0x3c>)
 8000260:	42a2      	cmp	r2, r4
 8000262:	f173 0300 	sbcs.w	r3, r3, #0
 8000266:	d3f1      	bcc.n	800024c <delay+0x14>
		;
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bc90      	pop	{r4, r7}
 8000272:	4770      	bx	lr
 8000274:	0003d090 	.word	0x0003d090

08000278 <main>:

int main(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800027e:	2101      	movs	r1, #1
 8000280:	4815      	ldr	r0, [pc, #84]	@ (80002d8 <main+0x60>)
 8000282:	f000 f86f 	bl	8000364 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000286:	2101      	movs	r1, #1
 8000288:	4814      	ldr	r0, [pc, #80]	@ (80002dc <main+0x64>)
 800028a:	f000 f86b 	bl	8000364 <GPIO_PeriClockControl>

	GPIO_Handle_t gpioLed;
	gpioLed.pGPIOx = GPIOB;
 800028e:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <main+0x60>)
 8000290:	60fb      	str	r3, [r7, #12]
	gpioLed.GPIO_PinConfig.GPIO_Pinumber = GPIO_PIN_NO_7;
 8000292:	2307      	movs	r3, #7
 8000294:	743b      	strb	r3, [r7, #16]
	gpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000296:	2301      	movs	r3, #1
 8000298:	747b      	strb	r3, [r7, #17]
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029a:	2302      	movs	r3, #2
 800029c:	74bb      	strb	r3, [r7, #18]
	gpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800029e:	2300      	movs	r3, #0
 80002a0:	753b      	strb	r3, [r7, #20]
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80002a2:	2300      	movs	r3, #0
 80002a4:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(&gpioLed);
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f968 	bl	8000580 <GPIO_Init>

	GPIO_Handle_t gpioBtn;
	gpioBtn.pGPIOx = GPIOC;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <main+0x64>)
 80002b2:	603b      	str	r3, [r7, #0]
	gpioBtn.GPIO_PinConfig.GPIO_Pinumber = GPIO_PIN_NO_13;
 80002b4:	230d      	movs	r3, #13
 80002b6:	713b      	strb	r3, [r7, #4]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 80002b8:	2305      	movs	r3, #5
 80002ba:	717b      	strb	r3, [r7, #5]
	gpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002bc:	2302      	movs	r3, #2
 80002be:	71bb      	strb	r3, [r7, #6]
	gpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80002c0:	2300      	movs	r3, #0
 80002c2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&gpioBtn);
 80002c4:	463b      	mov	r3, r7
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f95a 	bl	8000580 <GPIO_Init>

	//Enable IRQ for the pin
	GPIO_IRQInterruptConfig(IRQ_NUMBER_EXTI15_10, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	2028      	movs	r0, #40	@ 0x28
 80002d0:	f000 fb12 	bl	80008f8 <GPIO_IRQInterruptConfig>

	while (1) {
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <main+0x5c>
 80002d8:	40020400 	.word	0x40020400
 80002dc:	40020800 	.word	0x40020800

080002e0 <EXTI0_IRQHandler>:
		 }
		 delay();*/
	}
}

void EXTI0_IRQHandler(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
//Handle the EXTI0 IRQ

	GPIO_IRQHandling(0);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 fbc9 	bl	8000a7c <GPIO_IRQHandling>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	//Handle the EXTI0 IRQ
	GPIO_TogglePin(GPIOB, GPIO_PIN_NO_7);
 80002f4:	2107      	movs	r1, #7
 80002f6:	4805      	ldr	r0, [pc, #20]	@ (800030c <EXTI15_10_IRQHandler+0x1c>)
 80002f8:	f000 fae8 	bl	80008cc <GPIO_TogglePin>
	delay();
 80002fc:	f7ff ff9c 	bl	8000238 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_13);
 8000300:	200d      	movs	r0, #13
 8000302:	f000 fbbb 	bl	8000a7c <GPIO_IRQHandling>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40020400 	.word	0x40020400

08000310 <Reset_Handler>:
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
 8000312:	4685      	mov	sp, r0
 8000314:	f3af 8000 	nop.w
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
 800031e:	2300      	movs	r3, #0
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:
 8000322:	58d4      	ldr	r4, [r2, r3]
 8000324:	50c4      	str	r4, [r0, r3]
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:
 8000328:	18c4      	adds	r4, r0, r3
 800032a:	428c      	cmp	r4, r1
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
 8000332:	2300      	movs	r3, #0
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:
 8000336:	6013      	str	r3, [r2, #0]
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:
 800033a:	42a2      	cmp	r2, r4
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>
 800033e:	f000 fbbd 	bl	8000abc <__libc_init_array>
 8000342:	f7ff ff99 	bl	8000278 <main>

08000346 <LoopForever>:
 8000346:	e7fe      	b.n	8000346 <LoopForever>
 8000348:	20080000 	.word	0x20080000
 800034c:	20000000 	.word	0x20000000
 8000350:	20000000 	.word	0x20000000
 8000354:	08000b24 	.word	0x08000b24
 8000358:	20000000 	.word	0x20000000
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <GPIO_PeriClockControl>:
 * @return 					- None
 *
 * @NOte					- None
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI) {
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE) {
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d178      	bne.n	8000468 <GPIO_PeriClockControl+0x104>
		if (pGPIOx == GPIOA) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a75      	ldr	r2, [pc, #468]	@ (8000550 <GPIO_PeriClockControl+0x1ec>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800037e:	4b75      	ldr	r3, [pc, #468]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a74      	ldr	r2, [pc, #464]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if (pGPIOx == GPIOK) {
			GPIOK_PCLK_DI();
		}
	}
}
 800038a:	e0db      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOB) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a72      	ldr	r2, [pc, #456]	@ (8000558 <GPIO_PeriClockControl+0x1f4>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000394:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000398:	4a6e      	ldr	r2, [pc, #440]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a0:	e0d0      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOC) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a6d      	ldr	r2, [pc, #436]	@ (800055c <GPIO_PeriClockControl+0x1f8>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003aa:	4b6a      	ldr	r3, [pc, #424]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ae:	4a69      	ldr	r2, [pc, #420]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b6:	e0c5      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOD) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a69      	ldr	r2, [pc, #420]	@ (8000560 <GPIO_PeriClockControl+0x1fc>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003c0:	4b64      	ldr	r3, [pc, #400]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a63      	ldr	r2, [pc, #396]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003cc:	e0ba      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOE) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a64      	ldr	r2, [pc, #400]	@ (8000564 <GPIO_PeriClockControl+0x200>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a5e      	ldr	r2, [pc, #376]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e2:	e0af      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOF) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a60      	ldr	r2, [pc, #384]	@ (8000568 <GPIO_PeriClockControl+0x204>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003ec:	4b59      	ldr	r3, [pc, #356]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a58      	ldr	r2, [pc, #352]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f8:	e0a4      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOG) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a5b      	ldr	r2, [pc, #364]	@ (800056c <GPIO_PeriClockControl+0x208>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000402:	4b54      	ldr	r3, [pc, #336]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a53      	ldr	r2, [pc, #332]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040e:	e099      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOH) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a57      	ldr	r2, [pc, #348]	@ (8000570 <GPIO_PeriClockControl+0x20c>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000418:	4b4e      	ldr	r3, [pc, #312]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a4d      	ldr	r2, [pc, #308]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000424:	e08e      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOI) {
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a52      	ldr	r2, [pc, #328]	@ (8000574 <GPIO_PeriClockControl+0x210>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 800042e:	4b49      	ldr	r3, [pc, #292]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000432:	4a48      	ldr	r2, [pc, #288]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000438:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043a:	e083      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOJ) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a4e      	ldr	r2, [pc, #312]	@ (8000578 <GPIO_PeriClockControl+0x214>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000444:	4b43      	ldr	r3, [pc, #268]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000448:	4a42      	ldr	r2, [pc, #264]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800044e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000450:	e078      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		} else if (pGPIOx == GPIOK) {
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a49      	ldr	r2, [pc, #292]	@ (800057c <GPIO_PeriClockControl+0x218>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d174      	bne.n	8000544 <GPIO_PeriClockControl+0x1e0>
			GPIOK_PCLK_EN();
 800045a:	4b3e      	ldr	r3, [pc, #248]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a3d      	ldr	r2, [pc, #244]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000460:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000466:	e06d      	b.n	8000544 <GPIO_PeriClockControl+0x1e0>
		if (pGPIOx == GPIOA) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a39      	ldr	r2, [pc, #228]	@ (8000550 <GPIO_PeriClockControl+0x1ec>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d105      	bne.n	800047c <GPIO_PeriClockControl+0x118>
			GPIOA_PCLK_DI();
 8000470:	4b38      	ldr	r3, [pc, #224]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000474:	4a37      	ldr	r2, [pc, #220]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000476:	f023 0301 	bic.w	r3, r3, #1
 800047a:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOB) {
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a36      	ldr	r2, [pc, #216]	@ (8000558 <GPIO_PeriClockControl+0x1f4>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d105      	bne.n	8000490 <GPIO_PeriClockControl+0x12c>
			GPIOB_PCLK_DI();
 8000484:	4b33      	ldr	r3, [pc, #204]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000488:	4a32      	ldr	r2, [pc, #200]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800048a:	f023 0302 	bic.w	r3, r3, #2
 800048e:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOC) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a32      	ldr	r2, [pc, #200]	@ (800055c <GPIO_PeriClockControl+0x1f8>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d105      	bne.n	80004a4 <GPIO_PeriClockControl+0x140>
			GPIOC_PCLK_DI();
 8000498:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a2d      	ldr	r2, [pc, #180]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800049e:	f023 0304 	bic.w	r3, r3, #4
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOD) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000560 <GPIO_PeriClockControl+0x1fc>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d105      	bne.n	80004b8 <GPIO_PeriClockControl+0x154>
			GPIOD_PCLK_DI();
 80004ac:	4b29      	ldr	r3, [pc, #164]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b0:	4a28      	ldr	r2, [pc, #160]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004b2:	f023 0308 	bic.w	r3, r3, #8
 80004b6:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOE) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000564 <GPIO_PeriClockControl+0x200>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d105      	bne.n	80004cc <GPIO_PeriClockControl+0x168>
			GPIOE_PCLK_DI();
 80004c0:	4b24      	ldr	r3, [pc, #144]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a23      	ldr	r2, [pc, #140]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004c6:	f023 0310 	bic.w	r3, r3, #16
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOF) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a26      	ldr	r2, [pc, #152]	@ (8000568 <GPIO_PeriClockControl+0x204>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d105      	bne.n	80004e0 <GPIO_PeriClockControl+0x17c>
			GPIOF_PCLK_DI();
 80004d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004da:	f023 0320 	bic.w	r3, r3, #32
 80004de:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOG) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a22      	ldr	r2, [pc, #136]	@ (800056c <GPIO_PeriClockControl+0x208>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d105      	bne.n	80004f4 <GPIO_PeriClockControl+0x190>
			GPIOG_PCLK_DI();
 80004e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a19      	ldr	r2, [pc, #100]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOH) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000570 <GPIO_PeriClockControl+0x20c>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d105      	bne.n	8000508 <GPIO_PeriClockControl+0x1a4>
			GPIOH_PCLK_DI();
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000506:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOI) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a1a      	ldr	r2, [pc, #104]	@ (8000574 <GPIO_PeriClockControl+0x210>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d105      	bne.n	800051c <GPIO_PeriClockControl+0x1b8>
			GPIOI_PCLK_DI();
 8000510:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000514:	4a0f      	ldr	r2, [pc, #60]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800051a:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOJ) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a16      	ldr	r2, [pc, #88]	@ (8000578 <GPIO_PeriClockControl+0x214>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d105      	bne.n	8000530 <GPIO_PeriClockControl+0x1cc>
			GPIOJ_PCLK_DI();
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000528:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800052a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800052e:	6313      	str	r3, [r2, #48]	@ 0x30
		if (pGPIOx == GPIOK) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a12      	ldr	r2, [pc, #72]	@ (800057c <GPIO_PeriClockControl+0x218>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d105      	bne.n	8000544 <GPIO_PeriClockControl+0x1e0>
			GPIOK_PCLK_DI();
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053c:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <GPIO_PeriClockControl+0x1f0>)
 800053e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000542:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40020000 	.word	0x40020000
 8000554:	40023800 	.word	0x40023800
 8000558:	40020400 	.word	0x40020400
 800055c:	40020800 	.word	0x40020800
 8000560:	40020c00 	.word	0x40020c00
 8000564:	40021000 	.word	0x40021000
 8000568:	40021400 	.word	0x40021400
 800056c:	40021800 	.word	0x40021800
 8000570:	40021c00 	.word	0x40021c00
 8000574:	40022000 	.word	0x40022000
 8000578:	40022400 	.word	0x40022400
 800057c:	40022800 	.word	0x40022800

08000580 <GPIO_Init>:
 *
 * @NOte					-
 *
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporary register
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

	//1. CONFIGURE MODE OF GPIO PIN

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d820      	bhi.n	80005d6 <GPIO_Init+0x56>
		//Means the mode is non-interrupt mode
		//Mode will be actual pin-mode positioned at the location with two bit
		//we can left shift the temporary register by the mode by the pos = pinNumber x 2
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80005a4:	617b      	str	r3, [r7, #20]
		//clearing reg
		pGPIOHandle->pGPIOx->MODER &= ~(0b11
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
				<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	2103      	movs	r1, #3
 80005b4:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0b11
 80005b8:	43db      	mvns	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	400a      	ands	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]
		//writing reg
		pGPIOHandle->pGPIOx->MODER |= temp;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	697a      	ldr	r2, [r7, #20]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e0d1      	b.n	800077a <GPIO_Init+0x1fa>
	} else {

		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT) { //Mode is interrupt for falling edge
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	795b      	ldrb	r3, [r3, #5]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d816      	bhi.n	800060c <GPIO_Init+0x8c>
			// 1. Configure the FTSR (Falling edge trigger selection register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005de:	4b4d      	ldr	r3, [pc, #308]	@ (8000714 <GPIO_Init+0x194>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7912      	ldrb	r2, [r2, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a49      	ldr	r2, [pc, #292]	@ (8000714 <GPIO_Init+0x194>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	60d3      	str	r3, [r2, #12]
			//If we only want Falling edge trigger, then we will have to make sure that the RTSR for rising edge is disabled
			// it may be on because of previous configuration or for something else reason, so we will have to Clear it
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80005f4:	4b47      	ldr	r3, [pc, #284]	@ (8000714 <GPIO_Init+0x194>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7912      	ldrb	r2, [r2, #4]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	43d2      	mvns	r2, r2
 8000604:	4611      	mov	r1, r2
 8000606:	4a43      	ldr	r2, [pc, #268]	@ (8000714 <GPIO_Init+0x194>)
 8000608:	400b      	ands	r3, r1
 800060a:	6093      	str	r3, [r2, #8]
		}
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT) { //Mode is interrupt for rising edge
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	2b05      	cmp	r3, #5
 8000612:	d816      	bhi.n	8000642 <GPIO_Init+0xc2>
			// 1. Configure the RTSR (Rising edge trigger selection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000614:	4b3f      	ldr	r3, [pc, #252]	@ (8000714 <GPIO_Init+0x194>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a3b      	ldr	r2, [pc, #236]	@ (8000714 <GPIO_Init+0x194>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800062a:	4b3a      	ldr	r3, [pc, #232]	@ (8000714 <GPIO_Init+0x194>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	7912      	ldrb	r2, [r2, #4]
 8000632:	4611      	mov	r1, r2
 8000634:	2201      	movs	r2, #1
 8000636:	408a      	lsls	r2, r1
 8000638:	43d2      	mvns	r2, r2
 800063a:	4611      	mov	r1, r2
 800063c:	4a35      	ldr	r2, [pc, #212]	@ (8000714 <GPIO_Init+0x194>)
 800063e:	400b      	ands	r3, r1
 8000640:	60d3      	str	r3, [r2, #12]
		}
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT) { //Mode is interrupt for falling edge
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	2b06      	cmp	r3, #6
 8000648:	d815      	bhi.n	8000676 <GPIO_Init+0xf6>
			// 1. Configure both FTSR (Falling edge trigger selection register) and RTSR (Rising edge trigger selection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <GPIO_Init+0x194>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <GPIO_Init+0x194>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000660:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <GPIO_Init+0x194>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <GPIO_Init+0x194>)
 8000672:	430b      	orrs	r3, r1
 8000674:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber / 4;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber % 4;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <GPIO_Init+0x198>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d056      	beq.n	8000740 <GPIO_Init+0x1c0>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a21      	ldr	r2, [pc, #132]	@ (800071c <GPIO_Init+0x19c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d039      	beq.n	8000710 <GPIO_Init+0x190>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000720 <GPIO_Init+0x1a0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d032      	beq.n	800070c <GPIO_Init+0x18c>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000724 <GPIO_Init+0x1a4>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d02b      	beq.n	8000708 <GPIO_Init+0x188>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <GPIO_Init+0x1a8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d024      	beq.n	8000704 <GPIO_Init+0x184>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <GPIO_Init+0x1ac>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d01d      	beq.n	8000700 <GPIO_Init+0x180>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <GPIO_Init+0x1b0>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d016      	beq.n	80006fc <GPIO_Init+0x17c>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <GPIO_Init+0x1b4>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d00f      	beq.n	80006f8 <GPIO_Init+0x178>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <GPIO_Init+0x1b8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d008      	beq.n	80006f4 <GPIO_Init+0x174>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a15      	ldr	r2, [pc, #84]	@ (800073c <GPIO_Init+0x1bc>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d101      	bne.n	80006f0 <GPIO_Init+0x170>
 80006ec:	2309      	movs	r3, #9
 80006ee:	e028      	b.n	8000742 <GPIO_Init+0x1c2>
 80006f0:	2300      	movs	r3, #0
 80006f2:	e026      	b.n	8000742 <GPIO_Init+0x1c2>
 80006f4:	2308      	movs	r3, #8
 80006f6:	e024      	b.n	8000742 <GPIO_Init+0x1c2>
 80006f8:	2307      	movs	r3, #7
 80006fa:	e022      	b.n	8000742 <GPIO_Init+0x1c2>
 80006fc:	2306      	movs	r3, #6
 80006fe:	e020      	b.n	8000742 <GPIO_Init+0x1c2>
 8000700:	2305      	movs	r3, #5
 8000702:	e01e      	b.n	8000742 <GPIO_Init+0x1c2>
 8000704:	2304      	movs	r3, #4
 8000706:	e01c      	b.n	8000742 <GPIO_Init+0x1c2>
 8000708:	2303      	movs	r3, #3
 800070a:	e01a      	b.n	8000742 <GPIO_Init+0x1c2>
 800070c:	2302      	movs	r3, #2
 800070e:	e018      	b.n	8000742 <GPIO_Init+0x1c2>
 8000710:	2301      	movs	r3, #1
 8000712:	e016      	b.n	8000742 <GPIO_Init+0x1c2>
 8000714:	40013c00 	.word	0x40013c00
 8000718:	40020000 	.word	0x40020000
 800071c:	40020400 	.word	0x40020400
 8000720:	40020800 	.word	0x40020800
 8000724:	40020c00 	.word	0x40020c00
 8000728:	40021000 	.word	0x40021000
 800072c:	40021400 	.word	0x40021400
 8000730:	40021800 	.word	0x40021800
 8000734:	40021c00 	.word	0x40021c00
 8000738:	40022000 	.word	0x40022000
 800073c:	40022400 	.word	0x40022400
 8000740:	2300      	movs	r3, #0
 8000742:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 8000744:	4b5e      	ldr	r3, [pc, #376]	@ (80008c0 <GPIO_Init+0x340>)
 8000746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000748:	4a5d      	ldr	r2, [pc, #372]	@ (80008c0 <GPIO_Init+0x340>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074e:	6453      	str	r3, [r2, #68]	@ 0x44

		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000750:	7c7a      	ldrb	r2, [r7, #17]
 8000752:	7cbb      	ldrb	r3, [r7, #18]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	fa02 f103 	lsl.w	r1, r2, r3
 800075a:	4a5a      	ldr	r2, [pc, #360]	@ (80008c4 <GPIO_Init+0x344>)
 800075c:	7cfb      	ldrb	r3, [r7, #19]
 800075e:	3302      	adds	r3, #2
 8000760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the exti interrupt delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000764:	4b58      	ldr	r3, [pc, #352]	@ (80008c8 <GPIO_Init+0x348>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7912      	ldrb	r2, [r2, #4]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	4611      	mov	r1, r2
 8000774:	4a54      	ldr	r2, [pc, #336]	@ (80008c8 <GPIO_Init+0x348>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
	//2. CONFIGURE THE SPEED
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	799b      	ldrb	r3, [r3, #6]
 8000782:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800078e:	617b      	str	r3, [r7, #20]
	//clearing reg
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0b11
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	689a      	ldr	r2, [r3, #8]
			<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	2103      	movs	r1, #3
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0b11
 80007a2:	43db      	mvns	r3, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	400a      	ands	r2, r1
 80007ac:	609a      	str	r2, [r3, #8]
	//setting reg
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6899      	ldr	r1, [r3, #8]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]

	temp = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
	//3. CONFIGURE THE PUPD REGISTERS
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	79db      	ldrb	r3, [r3, #7]
 80007c6:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80007d2:	617b      	str	r3, [r7, #20]
	//clearing reg
	pGPIOHandle->pGPIOx->PUPDR &= ~(0b11
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68da      	ldr	r2, [r3, #12]
			<< 2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	2103      	movs	r1, #3
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0b11
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	400a      	ands	r2, r1
 80007f0:	60da      	str	r2, [r3, #12]
	//setting reg
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68d9      	ldr	r1, [r3, #12]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	430a      	orrs	r2, r1
 8000800:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
	//4. CONFIGURE THE OUTPUT TYPE
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7a1b      	ldrb	r3, [r3, #8]
 800080a:	461a      	mov	r2, r3
			<< pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000814:	617b      	str	r3, [r7, #20]
	//clearing reg
	pGPIOHandle->pGPIOx->OTYPER &= ~(0b1
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	2301      	movs	r3, #1
 8000824:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0b1
 8000826:	43db      	mvns	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	400a      	ands	r2, r1
 8000830:	605a      	str	r2, [r3, #4]
	//setting reg
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6859      	ldr	r1, [r3, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	430a      	orrs	r2, r1
 8000840:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
	//5. CONFIGURE THE ALTERNATE FUNCTIONALITY
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN) { //If the mode is alternate function, then only configure the alternate function
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	795b      	ldrb	r3, [r3, #5]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d832      	bhi.n	80008b4 <GPIO_Init+0x334>

		uint8_t AFR_REG, POS;
		AFR_REG = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber / 8;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	743b      	strb	r3, [r7, #16]
		POS = pGPIOHandle->GPIO_PinConfig.GPIO_Pinumber % 8;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	73fb      	strb	r3, [r7, #15]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * POS);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7a5b      	ldrb	r3, [r3, #9]
 8000864:	461a      	mov	r2, r3
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	617b      	str	r3, [r7, #20]

		//clearing reg
		pGPIOHandle->pGPIOx->AFR[AFR_REG] &= ~(0b1111 << 4 * POS);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	7c3a      	ldrb	r2, [r7, #16]
 8000876:	3208      	adds	r2, #8
 8000878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	220f      	movs	r2, #15
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	7c3a      	ldrb	r2, [r7, #16]
 8000890:	4001      	ands	r1, r0
 8000892:	3208      	adds	r2, #8
 8000894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//setting reg
		pGPIOHandle->pGPIOx->AFR[AFR_REG] |= temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	7c3a      	ldrb	r2, [r7, #16]
 800089e:	3208      	adds	r2, #8
 80008a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	7c3a      	ldrb	r2, [r7, #16]
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	4301      	orrs	r1, r0
 80008ae:	3208      	adds	r2, #8
 80008b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40013c00 	.word	0x40013c00

080008cc <GPIO_TogglePin>:
 * @return 					-
 *
 * @NOte					-
 *
 */
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	78fa      	ldrb	r2, [r7, #3]
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	405a      	eors	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	615a      	str	r2, [r3, #20]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <GPIO_IRQInterruptConfig>:
 * @return 					-
 *
 * @NOte					-
 *
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]

	if (ENorDI == ENABLE) {
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d14e      	bne.n	80009ac <GPIO_IRQInterruptConfig+0xb4>

		if (IRQNumber <= 31) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b1f      	cmp	r3, #31
 8000912:	d80a      	bhi.n	800092a <GPIO_IRQInterruptConfig+0x32>
			//PROGRAM ISER0
			//NVIC_ISER0 IS A POINTER, SO DEREFERANCE IT AND PUT THE VALUE
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000914:	4b50      	ldr	r3, [pc, #320]	@ (8000a58 <GPIO_IRQInterruptConfig+0x160>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	2101      	movs	r1, #1
 800091c:	fa01 f202 	lsl.w	r2, r1, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4a4d      	ldr	r2, [pc, #308]	@ (8000a58 <GPIO_IRQInterruptConfig+0x160>)
 8000924:	430b      	orrs	r3, r1
 8000926:	6013      	str	r3, [r2, #0]
			//PROGRAM ICER3
			*NVIC_ICER3 |= (1 << IRQNumber % 96);
		}
	}

}
 8000928:	e08f      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b1f      	cmp	r3, #31
 800092e:	d90f      	bls.n	8000950 <GPIO_IRQInterruptConfig+0x58>
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b3f      	cmp	r3, #63	@ 0x3f
 8000934:	d80c      	bhi.n	8000950 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000936:	4b49      	ldr	r3, [pc, #292]	@ (8000a5c <GPIO_IRQInterruptConfig+0x164>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	f002 021f 	and.w	r2, r2, #31
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	4611      	mov	r1, r2
 8000948:	4a44      	ldr	r2, [pc, #272]	@ (8000a5c <GPIO_IRQInterruptConfig+0x164>)
 800094a:	430b      	orrs	r3, r1
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e07c      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 65 && IRQNumber < 96) {
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b41      	cmp	r3, #65	@ 0x41
 8000954:	d90f      	bls.n	8000976 <GPIO_IRQInterruptConfig+0x7e>
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b5f      	cmp	r3, #95	@ 0x5f
 800095a:	d80c      	bhi.n	8000976 <GPIO_IRQInterruptConfig+0x7e>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 800095c:	4b40      	ldr	r3, [pc, #256]	@ (8000a60 <GPIO_IRQInterruptConfig+0x168>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a60 <GPIO_IRQInterruptConfig+0x168>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	e069      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 97 && IRQNumber < 128) {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b61      	cmp	r3, #97	@ 0x61
 800097a:	d966      	bls.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db62      	blt.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
			*NVIC_ISER3 |= (1 << IRQNumber % 96);
 8000984:	4b37      	ldr	r3, [pc, #220]	@ (8000a64 <GPIO_IRQInterruptConfig+0x16c>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <GPIO_IRQInterruptConfig+0x170>)
 800098c:	fba3 1302 	umull	r1, r3, r3, r2
 8000990:	0999      	lsrs	r1, r3, #6
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	015b      	lsls	r3, r3, #5
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	2301      	movs	r3, #1
 80009a2:	4093      	lsls	r3, r2
 80009a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000a64 <GPIO_IRQInterruptConfig+0x16c>)
 80009a6:	4303      	orrs	r3, r0
 80009a8:	6013      	str	r3, [r2, #0]
}
 80009aa:	e04e      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
		if (IRQNumber <= 31) {
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b1f      	cmp	r3, #31
 80009b0:	d80a      	bhi.n	80009c8 <GPIO_IRQInterruptConfig+0xd0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80009b2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <GPIO_IRQInterruptConfig+0x174>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a6c <GPIO_IRQInterruptConfig+0x174>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	e040      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b1f      	cmp	r3, #31
 80009cc:	d90f      	bls.n	80009ee <GPIO_IRQInterruptConfig+0xf6>
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80009d2:	d80c      	bhi.n	80009ee <GPIO_IRQInterruptConfig+0xf6>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <GPIO_IRQInterruptConfig+0x178>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	f002 021f 	and.w	r2, r2, #31
 80009de:	2101      	movs	r1, #1
 80009e0:	fa01 f202 	lsl.w	r2, r1, r2
 80009e4:	4611      	mov	r1, r2
 80009e6:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <GPIO_IRQInterruptConfig+0x178>)
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	e02d      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 65 && IRQNumber < 96) {
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b41      	cmp	r3, #65	@ 0x41
 80009f2:	d90f      	bls.n	8000a14 <GPIO_IRQInterruptConfig+0x11c>
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b5f      	cmp	r3, #95	@ 0x5f
 80009f8:	d80c      	bhi.n	8000a14 <GPIO_IRQInterruptConfig+0x11c>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <GPIO_IRQInterruptConfig+0x17c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a04:	2101      	movs	r1, #1
 8000a06:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <GPIO_IRQInterruptConfig+0x17c>)
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e01a      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
		} else if (IRQNumber > 97 && IRQNumber < 128) {
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b61      	cmp	r3, #97	@ 0x61
 8000a18:	d917      	bls.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db13      	blt.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
			*NVIC_ICER3 |= (1 << IRQNumber % 96);
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <GPIO_IRQInterruptConfig+0x180>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <GPIO_IRQInterruptConfig+0x170>)
 8000a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a2e:	0999      	lsrs	r1, r3, #6
 8000a30:	460b      	mov	r3, r1
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	440b      	add	r3, r1
 8000a36:	015b      	lsls	r3, r3, #5
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4093      	lsls	r3, r2
 8000a42:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <GPIO_IRQInterruptConfig+0x180>)
 8000a44:	4303      	orrs	r3, r0
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	e7ff      	b.n	8000a4a <GPIO_IRQInterruptConfig+0x152>
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000e104 	.word	0xe000e104
 8000a60:	e000e108 	.word	0xe000e108
 8000a64:	e000e10c 	.word	0xe000e10c
 8000a68:	aaaaaaab 	.word	0xaaaaaaab
 8000a6c:	e000e180 	.word	0xe000e180
 8000a70:	e000e184 	.word	0xe000e184
 8000a74:	e000e188 	.word	0xe000e188
 8000a78:	e000e18c 	.word	0xe000e18c

08000a7c <GPIO_IRQHandling>:
	uint8_t shiftAmount = (8 * iprx_Section)
			+ (8 - NO_OF_PRIORITY_BITS_IMPLEMNETED);
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQpriority << shiftAmount); //ghapla
}

void GPIO_IRQHandling(uint8_t pinNumber) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]

	//Clear the pending register, corresponding to the pin number
	//check if it is set.
	if (EXTI->PR & (1 << pinNumber)) {
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <GPIO_IRQHandling+0x3c>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a92:	4013      	ands	r3, r2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d009      	beq.n	8000aac <GPIO_IRQHandling+0x30>

		//CLEAR THE PR REGISTER
		EXTI->PR |= (1 << pinNumber);
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <GPIO_IRQHandling+0x3c>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <GPIO_IRQHandling+0x3c>)
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6153      	str	r3, [r2, #20]
	}

}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40013c00 	.word	0x40013c00

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4d0d      	ldr	r5, [pc, #52]	@ (8000af4 <__libc_init_array+0x38>)
 8000ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8000af8 <__libc_init_array+0x3c>)
 8000ac2:	1b64      	subs	r4, r4, r5
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	42a6      	cmp	r6, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	4d0b      	ldr	r5, [pc, #44]	@ (8000afc <__libc_init_array+0x40>)
 8000ace:	4c0c      	ldr	r4, [pc, #48]	@ (8000b00 <__libc_init_array+0x44>)
 8000ad0:	f000 f818 	bl	8000b04 <_init>
 8000ad4:	1b64      	subs	r4, r4, r5
 8000ad6:	10a4      	asrs	r4, r4, #2
 8000ad8:	2600      	movs	r6, #0
 8000ada:	42a6      	cmp	r6, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae4:	4798      	blx	r3
 8000ae6:	3601      	adds	r6, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aee:	4798      	blx	r3
 8000af0:	3601      	adds	r6, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000b1c 	.word	0x08000b1c
 8000af8:	08000b1c 	.word	0x08000b1c
 8000afc:	08000b1c 	.word	0x08000b1c
 8000b00:	08000b20 	.word	0x08000b20

08000b04 <_init>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr

08000b10 <_fini>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr
